Changing code under third_party/github.com/camlistore/goexif
============================================================

Syncing updates from upstream
-----------------------------

These instructions assume you have a github.com account. Further it is assumed
that your camlistore copy is at $GOPATH/src/camlistore.org

1.	Checkout the github.com/rwcarlsen/goexif by calling
	$ go get -u github.com/rwcarlsen/goexif
	$ cd $GOPATH/src/github.com/rwcarlsen/goexif

2.	Use git show to determine the revision.
	$ git show commit cf045e9d6ba052fd348f82394d364cca4937589a

3.	Start merging using your favorite tools (vimdiff, meld, kdiff3, etc.)

4.	For the moment make sure to rewrite any new goexif import paths. For
	example,

	import "github.com/rwcarlsen/goexif/tiff"

	needs to be rewritten to

	import "camlistore.org/third_party/github.com/camlistore/goexif/tiff"

	NOTE: Currently, you cannot use rewrite-imports.sh. This is going to change
	in the future, as "third_party/github.com/camlistore/goexif/" is going to
	be renamed to "third_party/github.com/rwcarlsen/goexif/".

5.	Camlistore does not need to have all test data of upstream goexif in its
	repository. For that reason, do not merge the file
	exif/regress_expected_test.go and the subfolder 'exif/samples' to
	camlistore. When merging exif_test.go, make sure to keep the test path to
	be "." instead of "samples".

	Rationale: regress_expected_test.go is generated anew by exif_test.go (func
	TestRegenRegress()), when the non-exported boolean variable 'regenRegress'
	is set to true.  In upstream, this file is generated on the subfolder
	called 'samples', which contains some JPGs. Since Camlistore omits the samples
	folder, we change the exif_test.go to use the goexif/exif folder directly
	(which contains the single sample1.jpg) instead of the samples subfolder.
	Unless new test images are added, regress_expected_test.go does not need to
	be regenerated. It is unlikely that Camlistore will add new test data.

6.	Ensure all Camlistore code still compiles and all tests run through:
    $ devcam test

7.	# Now create a commit that will be sent for review.
	$ git commit -v

	# Enter your commit message on the first line per usual.
    # Add the goexif revision from step 1. to the commit message as well
    # as the commit messages of any noteworthy commits from upstream.
	$ devcam review


Syncing Camlistore contributions back to upstream goexif
------------------------------------------------------------

1.	Use a merge tool like meld, kdiff3, or similar to manually merge the code.
	$ meld $GOPATH/src/camlistore.org/third_party/github.com/camlistore/goexif \
		$GOPATH/src/github.com/rwcarlsen/goexif

2.	While merging, make sure to have the correct goexif import paths. For
	example,

	import "camlistore.org/third_party/github.com/camlistore/goexif/tiff"

	needs to be

	import "github.com/rwcarlsen/goexif/tiff"

3.	Make sure the samples folder path in exif_test.go stays "sample".

4.	Follow the github.com procedures to commit and submit a Pull Request.

