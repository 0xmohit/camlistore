JSON claim objects need to be signed.  If I want to distribute a Camli
blob object publicly, declaring that I "favorite" or "star" a named
entity, it should be verifiable.

The properties we want in the JSON file, ideally, include:

GOAL #1) it's still a valid JSON file in its entirety.

This means no non-JSON compliant header or footer.

This implies that the data structure to be signed and the signature
metadata be separate, in an outer JSON wrapper.

This has been discussed and implemented in various ways.  For example,
in jchris's canonical-json project,

    http://github.com/jchris/canonical-json

... the "signed-content" and the "signature" are parallel objects under the
same outer JSON object.

The problem then becomes that the verifier, after parsing the JSON
blob, needs to re-serialize the JSON "signed-content" object,
byte-for-byte as in the original, in order to verify the signature.

In jchris' strategy, the canonicalization is implemented by
referencing JavaScript code that serializes it.  This has the
advantage that the serialization could change over time, but the
disadvantage that you have to embed a Rhino, V8, SpiderMonkey, or
similar into your parser, which is somewhat heavy.  Considering that
canonical JSON serialization is something that should be relatively
static and could be defined once, I'm not sure that the flexibility is
worth the cost.

Overall, though, the jchris approach's structure of the JSON file is
good.

Notably, it satisifies on of my other goals:

GOAL #2) The document still be human-readable.

For instance, the laptop.org project is proposing this Canonical JSON
format:

   http://wiki.laptop.org/go/Canonical_JSON

.. unfortunately, all whitespace is stripped.  It's not a deal
breaker, but lacks human readableness.

You might say, "Bring your own serialization! Wrap the signed-content
in a string!"

But then you're back to the readable problem, because JSON strings
can't have embedded newline literals.

Thus, you need to define a JSON serialization format.

Unfortunately, I'm defining a new one here.  The "Camli JSON
serialization format" which is just JSON, but with the following
restrictions / requirements:

-- ....



